procedure start()
  key = "fact"

  anaUri := new FactAnaUri()
  anaUri->createOwnQueue()

  assembler := new AssemblerTest()
  assembler->createOwnQueue()

  htmlMaker := new HTMLMaker()
  
  entranceQueue := anaUri->getConsumingQueue()
  calculated_numbersQueue := assembler->getConsumingQueue()

  assembled_calculationsQueue := new Queue()

  assembler->setProducingQueue(assembled_calculationsQueue)
  htmlMaker->setConsumingQueue(this->assembled_calculationsQueue)

  thread_count := numero_de_cpus
  solvers.resize(thread_count)

  for i := 0 until i < solvers_size do
    solvers[i] := new Solver();
    if i = 0 do
      solvers[i]->createOwnQueue()
    end 
    else do
      solvers[i]->setConsumingQueue(solvers[0]->getConsumingQueue())
    end
    solvers[i]->setProducingQueue(assembler->getConsumingQueue())
    ++i
  end
  anaUri->setProducingQueue(solvers[0]->getConsumingQueue())
  anaUri->startThread()
  assembler->startThread()

  for i := 0; i < this->solvers_size do
    solvers[i]->startThread()
    ++i
  end
  
  htmlMaker->startThread()

end

procedure stop()
  anaUri->waitToFinish()
  assembler->waitToFinish()

  for i := 0; i < this->solvers.size() do
    solvers[i]->waitToFinish()
    ++i
  end

  htmlMaker->waitToFinish()

end